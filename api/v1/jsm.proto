syntax = "proto3";

package coolbeans.api.v1;

option go_package = ".;coolbeans_api_v1";

import "client.proto";
import "job.proto";
import "empty.proto";

service JobStateMachine {
    // Put creates a new job with the provided job parameters
    //
    // The response contains the identifier of the job created
    rpc Put (PutRequest) returns (PutResponse) {}

    // Delete a job with the provided job id
    rpc Delete (DeleteRequest) returns (Empty) {}

    // Reserve is a request to reserve a channel for a client by this proxy
    rpc Reserve (ReserveRequest) returns (ReserveResponse) {}

    // StreamReserveUpdates is a streaming RPC from the server back to client
    //
    // Reservations are streamed as they are available for this proxy
    rpc StreamReserveUpdates (ReserveUpdateRequest) returns (stream ReserveResponse) {}

    // CheckClientState queries the job state machine whether the provided list of clientIds are waiting for reservations.
    rpc CheckClientState (CheckClientStateRequest) returns (CheckClientStateResponse) {}

    // Release a reserved job back to either a Ready or a Delayed state
    rpc Release (ReleaseRequest) returns (Empty) {}

    // Extend a reserved job's reservation TTL by its TTR (time-to-run)
    rpc Touch (TouchRequest) returns (Empty) {}

    // Bury this job, if this job is in the reserved state
    rpc Bury (BuryRequest) returns (Empty) {}

    // Kick this job, if this job is in a buried stated to ready state
    rpc Kick (KickRequest) returns (Empty) {}

    // Kick at-most n jobs in this tube,
    rpc KickN (KickNRequest) returns (KickNResponse) {}

    // Peek a specific job (by the JobID)
    rpc GetJob (GetJobRequest) returns (GetJobResponse) {}

    // Peek a tube's buried jobs
    rpc PeekBuried (PeekRequest) returns (PeekResponse){}

    // Peek a tube's delayed jobs
    rpc PeekDelayed (PeekRequest) returns (PeekResponse) {}

    // Peek a tube's ready jobs
    rpc PeekReady (PeekRequest) returns (PeekResponse) {}
}

message PutRequest {
    // Refer Job.priority
    uint32 priority = 1;

    // Refer Job.delay
    int64 delay = 2;

    // Refer Job.ttr
    int32 ttr = 3;

    // Refer Job.tube_na,e
    string tube_name = 4;

    // Refer Job.body_size
    int32 body_size = 5;

    // Refer Job.body
    bytes body = 6;
}

message PutResponse {
    // The job identifier of the new job created
    int64 job_id = 1;
}

message DeleteRequest {
    // The job identifier of the job to be deleted
    int64 job_id = 1;

    // the proxy identifier forwarding the client's request
    string proxy_id = 2;

    // the client identifier of the client (deleting this job)
    string client_id = 3;
}

message ReserveRequest {
    // client id of the reservation
    string client_id = 1;

    // request id identify this reservation
    string request_id = 2;

    // reservation timeout in seconds
    int32 timeout_secs = 3;

    // array of tubes to watch
    repeated string watched_tubes = 4;

    // the proxy identifier forwarding the client's request
    string proxy_id = 5;
}

message ReserveResponse {
    // Reservation object encapsulated in this response
    Reservation reservation = 1;
}

message ReserveUpdateRequest {
    // the proxy identifier requesting reservation update
    string proxy_id = 1;
}

message ReserveUpdateResponse {
    // Reservations  encapsulated in this response
    Reservation reservation = 1;
}

message TickResponse {
    // Reservations grouped by proxy id
    map<string, Reservations> proxy_reservations = 3;
}

message Reservations {
    // Reservation object encapsulated in this response
    repeated Reservation entries = 1;
}

enum ReservationStatus {
    // Unknown ~~> UnknownRS (yuck!!)
    // Note that enum values use C++ scoping rules, meaning
    // that enum values are siblings of their type, not children of it.
    // Therefore, "Unknown" must be unique within "coolbeans.api.v1",
    // not just within "ResultCode"
    UnknownRS = 0;
    Queued = 1;
    DeadlineSoon = 2;
    Matched = 3;
    Timeout = 4;
    Error = 5;
}

message Reservation {
    // request_id associated with this reservation
    string request_id = 1;

    // client id assinged to this reservation
    string client_id = 2;

    // Result of this reservation
    ReservationStatus Status = 3;

    // job id (assigned) if Status is matched
    int64 job_id = 4;

    // job body size (assigned) if Status is matched
    int32 body_size = 5;

    // job body  (assigned) if Status is matched
    bytes body = 6;

    // error message (assigned) if Status is error
    string error_msg = 7;

    // proxy_id is the id of the proxy server that
    // forwarded this reservation request
    string proxy_id = 8;
}

message ReleaseRequest {
    // The job identifier of the job to be released
    int64 job_id = 1;

    // The identifier of the client asking for the release
    string client_id = 2;

    // proxy_id is the id of the proxy server that
    // forwarded this  request
    string proxy_id = 3;

    // A delay if set to a value > 0 marks the job as delayed
    int64 delay = 4;

    // the new priority with which this job is released
    uint32 priority = 5;
}

message CheckClientStateRequest {
    // proxy_id is the id of the proxy server that
    // forwarded this  request
    string proxy_id = 1;

    // Array of all client_ids
    repeated string client_ids = 2;
}

message CheckClientStateResponse {
    // proxy_id is the id of the proxy server that
    // forwarded this  request
    string proxy_id = 1;

    // Array of all client_ids waiting for reservations
    repeated string waiting_client_ids = 2;

    // Array of all client_ids not waiting for reservations
    repeated string not_waiting_client_ids = 3;

    // Array of all client_ids unknown or missing on the server
    repeated string missing_client_ids = 4;
}

message TouchRequest {
    // The job identifier of the job to be touched
    int64 job_id = 1;

    // The identifier of the client asking for the release
    string client_id = 2;

    // proxy_id is the id of the proxy server that
    // forwarded this  request
    string proxy_id = 3;
}

message BuryRequest {
    // The job identifier of the job to be buried
    int64 job_id = 1;

    // Refer Job.priority, the new priority for the job
    uint32 priority = 2;

    // Client id of the request
    string client_id = 3;

    // proxy_id is the id of the proxy server that forwarded this  request
    string proxy_id = 4;
}

message KickRequest {
    // The job identifier of the job to be Kicked
    int64 job_id = 1;
}

message KickNRequest {
    // Refer Job.tube_name
    string tube_name = 1;

    // bound is the maximum number of jobs to kick
    int32 bound = 2;
}

message KickNResponse {
    // The actual number of jobs kicked
    int32 jobs_kicked = 1;
}


message JobResponse {
    // the identifier of the job
    int64 job_id = 1;

    // job body size
    int32 body_size = 2;

    // job body
    bytes body = 3;
}

message GetJobRequest {
    // Id of the job to get
    int64 job_id = 1;
}

message GetJobResponse {
    // An optional job if set.
    JobResponse job = 1;
}

message PeekRequest {
    // the name of the tube
    string tube_name = 1;
}

message PeekResponse {
    // An optional job if set.
    JobResponse job = 1;
}

////////////////////////////////////////////////////////////////////////

// Encapsulates a snap of the entire system
message SnapshotProto {
    // Array of all jobs currently in the system
    repeated JobProto jobs = 1;

    // Arrayy of all client reservation entries in the system
    repeated ClientResvEntryProto reservations = 2;
}

////////////////////////////////////////////////////////////////////////

message ApplyOpRequest {
    // Indicates the type of operation
    OpType op = 1;

    // time in seconds from epoch this request is made
    int64 now_secs = 2;

    // The operation request body
    bytes body = 3;
}

message ApplyOpResponse {
    // error code
    ResultCode error_code = 1;

    // error message (typically set if error_code > 0
    string error_message = 2;

    // The response body
    bytes body = 3;
}

enum OpType {
    UNKNOWN = 0;
    PUT = 1;
    RESERVE = 2;
    TICK = 3;
    DELETE = 4;
    RELEASE = 5;
    CHECK_CLIENT_STATE = 6;
    BURY = 7;
    KICK = 8;
    KICKN = 9;
    TOUCH = 10;
    PEEK = 11;
    PEEK_READY = 12;
    PEEK_BURIED = 13;
    PEEK_DELAYED = 14;
}

// C & P from GRPC error codes
// https://github.com/grpc/grpc-go/blob/master/codes/codes.go
enum ResultCode {
    // OK is returned on success.
    OK = 0;

    // Canceled indicates the operation was canceled (typically by the caller).
    Canceled = 1;

    // Unknown error. An example of where this error may be returned is
    // if a Status value received from another address space belongs to
    // an error-space that is not known in this address space. Also
    // errors raised by APIs that do not return enough error information
    // may be converted to this error.
    Unknown = 2;

    // InvalidArgument indicates client specified an invalid argument.
    // Note that this differs from FailedPrecondition. It indicates arguments
    // that are problematic regardless of the state of the system
    // (e.g., a malformed file name).
    InvalidArgument = 3;

    // DeadlineExceeded means operation expired before completion.
    // For operations that change the state of the system, this error may be
    // returned even if the operation has completed successfully. For
    // example, a successful response from a server could have been delayed
    // long enough for the deadline to expire.
    DeadlineExceeded = 4;

    // NotFound means some requested entity (e.g., file or directory) was
    // not found.
    NotFound = 5;

    // AlreadyExists means an attempt to create an entity failed because one
    // already exists.
    AlreadyExists = 6;

    // PermissionDenied indicates the caller does not have permission to
    // execute the specified operation. It must not be used for rejections
    // caused by exhausting some resource (use ResourceExhausted
    // instead for those errors). It must not be
    // used if the caller cannot be identified (use Unauthenticated
    // instead for those errors).
    PermissionDenied = 7;

    // ResourceExhausted indicates some resource has been exhausted, perhaps
    // a per-user quota, or perhaps the entire file system is out of space.
    ResourceExhausted = 8;

    // FailedPrecondition indicates operation was rejected because the
    // system is not in a state required for the operation's execution.
    // For example, directory to be deleted may be non-empty, an rmdir
    // operation is applied to a non-directory, etc.
    //
    // A litmus test that may help a service implementor in deciding
    // between FailedPrecondition, Aborted, and Unavailable:
    //  (a) Use Unavailable if the client can retry just the failing call.
    //  (b) Use Aborted if the client should retry at a higher-level
    //      (e.g., restarting a read-modify-write sequence).
    //  (c) Use FailedPrecondition if the client should not retry until
    //      the system state has been explicitly fixed. E.g., if an "rmdir"
    //      fails because the directory is non-empty, FailedPrecondition
    //      should be returned since the client should not retry unless
    //      they have first fixed up the directory by deleting files from it.
    //  (d) Use FailedPrecondition if the client performs conditional
    //      REST Get/Update/Delete on a resource and the resource on the
    //      server does not match the condition. E.g., conflicting
    //      read-modify-write on the same resource.
    FailedPrecondition = 9;

    // Aborted indicates the operation was aborted, typically due to a
    // concurrency issue like sequencer check failures, transaction aborts,
    // etc.
    //
    // See litmus test above for deciding between FailedPrecondition,
    // Aborted, and Unavailable.
    Aborted = 10;

    // OutOfRange means operation was attempted past the valid range.
    // E.g., seeking or reading past end of file.
    //
    // Unlike InvalidArgument, this error indicates a problem that may
    // be fixed if the system state changes. For example, a 32-bit file
    // system will generate InvalidArgument if asked to read at an
    // offset that is not in the range [0,2^32-1], but it will generate
    // OutOfRange if asked to read from an offset past the current
    // file size.
    //
    // There is a fair bit of overlap between FailedPrecondition and
    // OutOfRange. We recommend using OutOfRange (the more specific
    // error) when it applies so that callers who are iterating through
    // a space can easily look for an OutOfRange error to detect when
    // they are done.
    OutOfRange = 11;

    // Unimplemented indicates operation is not implemented or not
    // supported/enabled in this service.
    Unimplemented = 12;

    // Internal errors. Means some invariants expected by underlying
    // system has been broken. If you see one of these errors,
    // something is very broken.
    Internal = 13;

    // Unavailable indicates the service is currently unavailable.
    // This is a most likely a transient condition and may be corrected
    // by retrying with a backoff. Note that it is not always safe to retry
    // non-idempotent operations.
    //
    // See litmus test above for deciding between FailedPrecondition,
    // Aborted, and Unavailable.
    Unavailable = 14;

    // DataLoss indicates unrecoverable data loss or corruption.
    DataLoss = 15;

    // Unauthenticated indicates the request does not have valid
    // authentication credentials for the operation.
    Unauthenticated = 16;
}
